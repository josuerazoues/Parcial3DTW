let mapa;
let polyline;
let rutaLatLngs = [];
let marcador;
let marcadorVehiculo;
let puntoPartidaVehiculo;
let ubicacionUsuario;

document.addEventListener('DOMContentLoaded', function() {
    const obtenerUbicacionBtn = document.getElementById('obtenerUbicacion');
    const confirmarLlegadaBtn = document.getElementById('confirmarLlegada');
    const latitudElem = document.getElementById('latitud');
    const longitudElem = document.getElementById('longitud');

    

    // Inicializar mapa
    try{
        if (document.getElementById('mapa')) {
            mapa = L.map('mapa').setView([0, 0], 2);
        }
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; OpenStreetMap contributors'
        }).addTo(mapa);
    }catch{
         console.error("Error al inicializar el mapa:", e);
        alert("Error al cargar el mapa. Por favor recarga la página.");
    }

    function calcularPuntoPartida(lat, lon) {
        const R = 6378137;
        const d = 500;
        const brng = Math.random() * 2 * Math.PI;
        const lat1 = lat * Math.PI / 180;
        const lon1 = lon * Math.PI / 180;
        const lat2 = Math.asin(Math.sin(lat1)*Math.cos(d/R) + 
                        Math.cos(lat1)*Math.sin(d/R)*Math.cos(brng));
        const lon2 = lon1 + Math.atan2(Math.sin(brng)*Math.sin(d/R)*Math.cos(lat1), 
                        Math.cos(d/R)-Math.sin(lat1)*Math.sin(lat2));
        return {
            lat: lat2 * 180 / Math.PI,
            lon: lon2 * 180 / Math.PI
        };
    }
    

    function obtenerRutaDesdeAPI(inicio, fin) {
        const apiKey = '5b3ce3597851110001cf62483f7bd1c2425342cfa57720c8cd568e06';
        const url = `https://api.openrouteservice.org/v2/directions/driving-car?api_key=${apiKey}&start=${inicio.lon},${inicio.lat}&end=${fin.lon},${fin.lat}`;

        fetch(url)
            .then(res => res.json())
            .then(data => {
                const coords = data.features[0].geometry.coordinates;
                rutaLatLngs = coords.map(c => [c[1], c[0]]); // Leaflet [lat, lon]

                if (polyline) {
                    mapa.removeLayer(polyline);
                }

                polyline = L.polyline(rutaLatLngs, { color: 'blue' }).addTo(mapa);
                mapa.fitBounds(polyline.getBounds());

                // Agregar marcador inicial del vehículo
                if (marcadorVehiculo) mapa.removeLayer(marcadorVehiculo);
                marcadorVehiculo = L.marker(rutaLatLngs[0], { icon: iconoVehiculo }).addTo(mapa)
                    .bindPopup('Vehículo saliendo...').openPopup();
            })
            .catch(err => {
                console.error('Error al obtener la ruta:', err);
                alert('No se pudo calcular la ruta real.');
            });
    }

    if (obtenerUbicacionBtn) {
        obtenerUbicacionBtn.addEventListener('click', function() {
            if (!navigator.geolocation) {
                alert('Tu navegador no soporta geolocalización.');
                return;
            }

            navigator.geolocation.getCurrentPosition(
                function(position) {
                    const lat = position.coords.latitude;
                    const lon = position.coords.longitude;
                    ubicacionUsuario = {lat, lon};

                    try {
                        latitudElem.textContent = lat;
                        longitudElem.textContent = lon;
                        puntoPartidaVehiculo = calcularPuntoPartida(lat, lon);
                        obtenerRutaDesdeAPI(puntoPartidaVehiculo, ubicacionUsuario);

                        if (marcador) mapa.removeLayer(marcador);
                        marcador = L.marker([lat, lon]).addTo(mapa)
                            .bindPopup('Tu ubicación actual').openPopup();

                        mapa.fitBounds([
                            [puntoPartidaVehiculo.lat, puntoPartidaVehiculo.lon],
                            [lat, lon]
                        ]);

                        if (confirmarLlegadaBtn) {
                            confirmarLlegadaBtn.style.display = 'block';
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        alert('Error al procesar la ubicación');
                    }
                },
                function(error) {
                    alert('Error al obtener la ubicación: ' + error.message);
                }
            );
        });
    }

    if (confirmarLlegadaBtn) {
        confirmarLlegadaBtn.addEventListener('click', function() {
            if (!ubicacionUsuario) {
                alert('Primero obtén tu ubicación actual');
                return;
            }

            if (confirm('¿Confirmar viaje en uber?')) {
                if ('Notification' in window) {
                    Notification.requestPermission().then(permiso => {
                        if (permiso === 'granted') {
                            new Notification('Vehículo llegó al destino', {
                                body: 'El vehículo ha llegado a tu ubicación actual.',
                                icon: 'https://cdn-icons-png.flaticon.com/512/744/744922.png'
                            });
                        } else {
                            alert('Vehículo llegó al destino');
                        }
                    });
                } else {
                    alert('Vehículo llegó al destino');
                }

                simularMovimientoPorRuta();
            }
        });
    }

    // Simula movimiento por la ruta real
    function simularMovimientoPorRuta() {
        if (rutaLatLngs.length === 0) return;

        let paso = 0;
        const total = rutaLatLngs.length;
        const intervalo = setInterval(() => {
            if (marcadorVehiculo) mapa.removeLayer(marcadorVehiculo);
            marcadorVehiculo = L.marker(rutaLatLngs[paso], { icon: iconoVehiculo }).addTo(mapa);

            if (paso === total - 1) {
                marcadorVehiculo.bindPopup('Vehículo ha llegado al destino').openPopup();
                clearInterval(intervalo);
            }
            paso++;
        }, 700); // velocidad de animación
    }
});

const iconoVehiculo = L.icon({
    iconUrl: '/images/Optimus.png',
    iconSize: [40, 40],
    iconAnchor: [20, 20]
});