var input = document.getElementById("password");
input.addEventListener("keyup", function (event) {
    if (event.keyCode === 13) {
        event.preventDefault();
        login();
    }
});

function login() {
    var usuario = document.getElementById('usuario').value;
    var password = document.getElementById('password').value;

    if (usuario === '') {
        toastr.error('Usuario es requerido');
        return;
    }

    if (password === '') {
        toastr.error('Contraseña es requerida');
        return;
    }

    openLoading();

    let formData = new FormData();
    formData.append('usuario', usuario);
    formData.append('password', password);

    axios.post('/admin/login', formData)
        .then((response) => {
            closeLoading();
            verificar(response);
        })
        .catch((error) => {
            toastr.error('error al iniciar sesión');
            closeLoading();
        });
}

function verificar(response) {
    if (response.data.success === 0) {
        toastr.error('Validación incorrecta');
    } else if (response.data.success === 1) {
        window.location = response.data.ruta;
    } else if (response.data.success === 2) {
        toastr.error('Contraseña incorrecta');
    } else if (response.data.success === 3) {
        toastr.error('Usuario no encontrado');
    } else if (response.data.success === 5) {
        Swal.fire({
            title: 'Usuario Bloqueado',
            text: "Contactar a la administración",
            icon: 'info',
            showCancelButton: false,
            confirmButtonColor: '#28a745',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Aceptar',
        });
    } else {
        toastr.error('Error al iniciar sesión');
    }
}

document.addEventListener('DOMContentLoaded', function () {
    const images = document.querySelectorAll('.floating-buttons img');
    const speed = 1.5;
    const directions = [];

    // Inicializa posiciones y direcciones aleatorias
    images.forEach((img, i) => {
        // Posición aleatoria
        const x = Math.random() * (window.innerWidth - img.width);
        const y = Math.random() * (window.innerHeight - img.height);
        img.style.left = `${x}px`;
        img.style.top = `${y}px`;

        // Dirección aleatoria (dx, dy)
        const dx = (Math.random() < 0.5 ? -1 : 1) * speed;
        const dy = (Math.random() < 0.5 ? -1 : 1) * speed;
        directions.push({ dx, dy });
    });

    function detectCollision(img1, img2) {
        const rect1 = img1.getBoundingClientRect();
        const rect2 = img2.getBoundingClientRect();

        return !(
            rect1.right < rect2.left ||
            rect1.left > rect2.right ||
            rect1.bottom < rect2.top ||
            rect1.top > rect2.bottom
        );
    }

    function move() {
        images.forEach((img, i) => {
            const rect = img.getBoundingClientRect();
            let x = parseFloat(img.style.left);
            let y = parseFloat(img.style.top);

            x += directions[i].dx;
            y += directions[i].dy;

            // Rebote en bordes del viewport
            if (x <= 0 || x + rect.width >= window.innerWidth) {
                directions[i].dx *= -1;
                x = Math.max(0, Math.min(x, window.innerWidth - rect.width));
            }
            if (y <= 0 || y + rect.height >= window.innerHeight) {
                directions[i].dy *= -1;
                y = Math.max(0, Math.min(y, window.innerHeight - rect.height));
            }

            // Rebote entre imágenes
            for (let j = 0; j < images.length; j++) {
                if (i !== j && detectCollision(img, images[j])) {
                    directions[i].dx *= -1;
                    directions[i].dy *= -1;
                    directions[j].dx *= -1;
                    directions[j].dy *= -1;
                }
            }

            img.style.left = `${x}px`;
            img.style.top = `${y}px`;
        });

        requestAnimationFrame(move);
    }

    move();
});